import time
import random
import threading
import json
import requests
from concurrent.futures import ThreadPoolExecutor

# تحميل الإعدادات من config.json
with open('config.json', 'r') as config_file:
    config = json.load(config_file)

# إضافة دالة لتحميل الـ Query ID
def load_query_id():
    try:
        with open('query_id.txt', 'r') as f:
            return f.read().strip()
    except FileNotFoundError:
        print("File query_id.txt not found.")
        return None

# تحميل الـ Query ID
query_id = load_query_id()

if not query_id:
    print("Query ID is missing. Exiting.")
    exit()

current_tokens = config['current_tokens']
desired_addition = config['desired_addition']
goal_tokens = current_tokens + desired_addition

# قراءة بيانات الوكيل من ملف
proxy_file = config.get('proxy_file', 'proxies.txt')

# تحميل الوكلاء من الملف
def load_proxies():
    proxies = []
    try:
        with open(proxy_file, 'r') as f:
            proxies = f.read().splitlines()
    except FileNotFoundError:
        print(f"File {proxy_file} not found.")
    return proxies

# دالة لاستخدام الوكلاء في الطلبات
def make_request_with_proxy(query_id, proxies):
    for proxy in proxies:
        proxy_dict = {"http": proxy, "https": proxy}
        try:
            response = requests.get(f"https://example.com/api?query={query_id}", proxies=proxy_dict, timeout=10)
            print(response.text)
            break  # اخرج من الحلقة إذا نجحت الطلب
        except requests.exceptions.RequestException as e:
            print(f"Failed with proxy {proxy}: {e}")
            time.sleep(random.uniform(1, 3))  # تأخير قبل المحاولة مرة أخرى

# دالة لحساب عدد الرموز وجمعها
token_lock = threading.Lock()  # قفل لحماية الوصول المتزامن إلى current_tokens

def claim_rewards():
    global current_tokens
    with token_lock:
        # هنا تكتب الكود الخاص بجمع الرموز من البوت
        current_tokens += random.randint(50, 100)  # رمز عشوائي كمثال
        print(f"Current tokens: {current_tokens}")
    time.sleep(random.uniform(2, 5))  # تأخير عشوائي لمنع الحظر

# دالة للتحقق من تحقيق الهدف
def check_token_goal():
    global current_tokens, goal_tokens
    if current_tokens >= goal_tokens:
        print(f"Goal reached: {goal_tokens} tokens!")
        return True
    return False

# دالة لجمع الرموز باستمرار
def collect_tokens():
    while not check_token_goal():
        claim_rewards()

# استخدام ThreadPoolExecutor بدلًا من الخيوط التقليدية
with ThreadPoolExecutor(max_workers=5) as executor:
    for _ in range(5):
        executor.submit(collect_tokens)

# عرض الرسالة عند الوصول للهدف
print(f"Successfully reached {goal_tokens} tokens!")

# عرض اسمك
print("تم الوصول للهدف بواسطة سفيان.")  # استبدل "سفيان" باسمك إذا أردت

# التعامل مع الوكلاء وتنفيذ الطلب باستخدام الـ Query ID
proxies = load_proxies()

if proxies:
    make_request_with_proxy(query_id, proxies)
else:
    print("No proxies available.")
